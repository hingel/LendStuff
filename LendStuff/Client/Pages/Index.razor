@page "/"
@using LendStuff.Shared.DTOs
@using LendStuff.Shared

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient

@inject IHttpClientFactory ClientFactory

<PageTitle>Index</PageTitle>


<h1>Available Boardgames</h1>

<Virtualize Items="boardGameDtos.ToList()" Context="BoardGameDto">
	<li class="list-group-item list-group-item-action">
		<a class="container nav-link" href="/boardgamePage/@BoardGameDto.Id">
			@*			<div class="container col-md-2">
				<a class="nav-link" href="/boardgamePage/@BoardGameDto.Id/">link to @BoardGameDto.Title</a>
			</div>*@
			<div class="container col-md-2">@BoardGameDto.Title</div>
		</a>
		<AuthorizeView>
			<div class="col-md-2">
				<p>In your collection?</p>
				<div class="form-check">
					<input type="checkbox" class="form-check-input" @onclick="() => ChangeCollection(BoardGameDto)" checked="@InCollection(BoardGameDto)" />
				</div>
			</div>
		</AuthorizeView>
	</li>
</Virtualize>


@code
{
	private IEnumerable<BoardGameDto> boardGameDtos = new List<BoardGameDto>();
	private string _userId = String.Empty;
	public UserDto _currentUserDto = new UserDto();

	protected override async Task OnInitializedAsync()
	{
		var userAuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		//Skapar en client för oregistrerade användare:
		var client = ClientFactory.CreateClient("NonLoggedIdUser");

		var unregisteredResponse = await client.GetFromJsonAsync<ServiceResponse<BoardGameDto[]>>(HttpClient.BaseAddress + "allGames");

		if (unregisteredResponse.Success)
		{
			boardGameDtos = unregisteredResponse.Data.Where(b => b.Available);
		}

		//var response = await HttpClient.GetFromJsonAsync<ServiceResponse<BoardGameDto[]>>(HttpClient.BaseAddress + "allGames");

		//if (response.Success)
		//{
		//	boardGameDtos = response.Data.Where(b => b.Available);
		//}


		if (userAuthState.User.Claims.Count() > 1)
			_userId = userAuthState.User.Claims.ToList()[2].Value;

		if (!string.IsNullOrEmpty(_userId))
		{
			var userResponse = await HttpClient.GetFromJsonAsync<ServiceResponse<UserDto>>(HttpClient.BaseAddress + $"getById?id={_userId}");

			if (userResponse.Success)
				_currentUserDto = userResponse.Data;

			var boardGameResponse = await HttpClient.GetFromJsonAsync<ServiceResponse<UserBoardGameDto[]>>(HttpClient.BaseAddress + $"getUsersGames?id={_userId}");

			if (boardGameResponse.Success)
			{
				_currentUserDto.BoardGameDtos = boardGameResponse.Data.ToList();
			}
		}

		await base.OnInitializedAsync();
	}

	private async Task ChangeCollection(BoardGameDto boardGame)
	{
		if (_currentUserDto.BoardGameDtos.All(b => b.BoardGameDto.Id != boardGame.Id))
		{
			var response = await HttpClient.PatchAsJsonAsync(HttpClient.BaseAddress + $"updateBoardGameToUser?id={_userId}", boardGame);

			if (response.IsSuccessStatusCode)
			{
				var resultText = await response.Content.ReadFromJsonAsync<ServiceResponse<string>>();
				Console.WriteLine(resultText.Message + "Boardgame added.");
			}
		}
		else
		{
			var response = await HttpClient.PatchAsJsonAsync(HttpClient.BaseAddress + $"updateBoardGameToUser?id={_userId}", boardGame);

			if (response.IsSuccessStatusCode)
			{
				var resultText = await response.Content.ReadFromJsonAsync<ServiceResponse<string>>();
				Console.WriteLine(resultText.Message + "Boardgame removed.");
			}
			
		}
	}

	private bool InCollection(BoardGameDto boardGameExists)
	{
		return _currentUserDto.BoardGameDtos.Any(b => b.BoardGameDto.Id == boardGameExists.Id);
	}
}
