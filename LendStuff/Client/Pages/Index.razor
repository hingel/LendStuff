@page "/"
@using LendStuff.Shared.DTOs
@using LendStuff.Shared
@using System.Reflection.Metadata

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient

<PageTitle>Index</PageTitle>

<h1>Available Boardgames</h1>

<Virtualize Items="boardGameDtos.ToList()" Context="BoardGameDto">
	<li class="list-group-item list-group-item-action">
		<div class="container row">
			<div class="container col-2">
				<a class="nav-link" href="/boardgamePage/@BoardGameDto.Id/">link to @BoardGameDto.Title</a>
			</div>
			<div class="container col-2">
				<AuthorizeView>
					<p>In your collection?</p>
					<div class="form-check">
						<input type="checkbox" class="form-check-input" @onclick="() => ChangeCollection(BoardGameDto)" checked="@InCollection(BoardGameDto)"/>
					</div>
				</AuthorizeView>
			</div>
		</div>
	</li>
</Virtualize>


@code
{
	//Lista upp alla spel på något bra sätt som är aktiva.
	private IEnumerable<BoardGameDto> boardGameDtos = new List<BoardGameDto>();
	private string _userId = String.Empty;
	public UserDto _currentUserDto = new UserDto();

	protected override async Task OnInitializedAsync()
	{
		var response = await HttpClient.GetFromJsonAsync<ServiceResponse<BoardGameDto[]>>(HttpClient.BaseAddress + "allGames");

		if (response.Success)
		{
			boardGameDtos = response.Data.Where(b => b.Available);
		}

		var userAuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = userAuthState.User.Claims.ToList()[2].Value;

		var userResponse = await HttpClient.GetFromJsonAsync<ServiceResponse<UserDto>>(HttpClient.BaseAddress + $"getById?id={_userId}");

		if (userResponse.Success)
			_currentUserDto = userResponse.Data;

		var boardGameResponse = await HttpClient.GetFromJsonAsync<ServiceResponse<UserBoardGameDto[]>>(HttpClient.BaseAddress + $"getUsersGames?id={_userId}");

		if (boardGameResponse.Success)
		{
			_currentUserDto.BoardGameDtos = boardGameResponse.Data.ToList();
		}

		await base.OnInitializedAsync();
	}

	private async Task ChangeCollection(BoardGameDto boardGame)
	{
		

		if (_currentUserDto.BoardGameDtos.All(b => b.BoardGameDto.Id != boardGame.Id))
		{
			var response = await HttpClient.PatchAsJsonAsync(HttpClient.BaseAddress + $"updateBoardGameToUser?id={_userId}", boardGame);

			if (response.IsSuccessStatusCode)
			{
				var resultText = await response.Content.ReadFromJsonAsync<ServiceResponse<string>>();
				Console.WriteLine(resultText.Message + "Boardgame added.");
			}
		}
		else
		{
			var response = await HttpClient.PatchAsJsonAsync(HttpClient.BaseAddress + $"updateBoardGameToUser?id={_userId}", boardGame);

			if (response.IsSuccessStatusCode)
			{
				var resultText = await response.Content.ReadFromJsonAsync<ServiceResponse<string>>();
				Console.WriteLine(resultText.Message + "Boardgame removed.");
			}
			
		}
	}

	private bool InCollection(BoardGameDto boardGameExists)
	{
		return _currentUserDto.BoardGameDtos.Any(b => b.BoardGameDto.Id == boardGameExists.Id);
	}
}
