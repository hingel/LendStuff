@page "/OrderPage/{Id}"
@using LendStuff.Shared
@using LendStuff.Shared.DTOs
@using Microsoft.AspNetCore.Authorization

@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<h3>Ordernumber: @Id</h3>

@if (CurrentOrder is not null)
{
	<div class="container">
		Hittar en order och Id är: @CurrentOrder.OrderId BoardgameId: @CurrentOrder.BoardGameId
		Status: @CurrentOrder.Status
		
		<p>
			<label>
				Order Status is:
				<InputSelect @bind-Value="CurrentOrder.Status">
					<option value="">Select status...</option>
					<option value="@OrderStatus.Inquiry">Inquiry</option>
					<option value="@OrderStatus.Active">Active</option>
					<option value="@OrderStatus.Terminated">Terminated</option>
				</InputSelect>
			</label>
		</p>

	</div>

	@if (Owner != null && Borrower != null)
	{
		<div class="container">
			Owner: @Owner.UserName
			Borrower: @Borrower.UserName
		</div>

		<p>Order messages:</p>
		<Virtualize Items="CurrentOrder.OrderMessageDtos" Context="messageDto">
			<li class="list-group-item list-group-item-action">
				From: @messageDto.SentFromUserName @messageDto.Message @messageDto.MessageSent
			</li>
			
		</Virtualize>

		@*
			* Knapp för att ändra status på ordern: 
			* Kunna svara på ett meddelande?
			* 
		*@


	}
}
else
{
	<div class="container">Laddar... </div>
}



@code {
	[Parameter]
	public string Id { get; set; }

	public OrderDto CurrentOrder { get; set; } = null;
	public UserDto Owner { get; set; } = null;
	public UserDto Borrower { get; set; } = null;

	protected override async Task OnInitializedAsync()
	{
		var result = await HttpClient.GetFromJsonAsync<ServiceResponse<OrderDto>>(HttpClient.BaseAddress + $"getByOrderId?orderId={Id}");

		if (result.Success)
		{
			CurrentOrder = result.Data;
			await GetUserInfo();
		}

		await base.OnInitializedAsync();
	}

	private async Task GetUserInfo()
	{
		var resultOwner = await HttpClient.GetFromJsonAsync<ServiceResponse<UserDto>>(HttpClient.BaseAddress + $"getUserByUserName?userName={CurrentOrder.OwnerUserName}");

		if (resultOwner.Success)
			Owner = resultOwner.Data;

		var resultBorrower = await HttpClient.GetFromJsonAsync<ServiceResponse<UserDto>>(HttpClient.BaseAddress + $"getById?id={CurrentOrder.BorrowerUserId}");

		if (resultBorrower.Success)
			Borrower = resultBorrower.Data;
	}

}
