@page "/OrderPage/{Id}"
@using LendStuff.Shared
@using LendStuff.Shared.DTOs
@using Microsoft.AspNetCore.Authorization

@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<h3>Ordernumber: @Id</h3>

@if (CurrentOrder is not null)
{
	<div class="container">
		Hittar en order och Id är: @CurrentOrder.OrderId BoardgameId: @CurrentOrder.BoardGameId
		Status: @CurrentOrder.Status
		
		<p>
			<label>
				Order Status is:
				<InputSelect @bind-Value="CurrentOrder.Status">
					<option value="">Select status...</option>
					<option value="@OrderStatus.Inquiry">Inquiry</option>
					<option value="@OrderStatus.Active">Active</option>
					<option value="@OrderStatus.Terminated">Terminated</option>
				</InputSelect>
			</label>
		</p>
		
		<button class="btn">Knapp för att uppdatera ordern ej implementerad ännu:</button>
	</div>

	@if (Owner != null && Borrower != null)
	{
		<div class="container">
			Owner: @Owner.UserName
			Borrower: @Borrower.UserName
		</div>

		<p>Order messages:</p>
@* 
		<div class="" id="MessageAccordion">
			<Virtualize Items="CurrentOrder.OrderMessageDtos" Context="messageDto">
				<div class="accordion-item">
					<div class="accordion-header" id="heading_@messageDto.MessageId">
						<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@messageDto.MessageId" aria-expanded="true" aria-controls="collapse_@messageDto.MessageId" @onclick="() => IsReadMethod(messageDto)">
							@if (!messageDto.IsRead)
							{
								<div class="container" style="font-weight: bold">
									Time Sent: @messageDto.MessageSent Sent From: @messageDto.SentFromUserName
								</div>
							}
							else
							{
								<div class="container">
									Time Sent: @messageDto.MessageSent Sent From: @messageDto.SentFromUserName
								</div>
							}
						</button>
					</div>
					<div id="collapse_@messageDto.MessageId" class="accordion-collapse collapse" aria-labbeledby="#heading_@messageDto.MessageId" data-bs-parent="#MessageAccordion">
						<div class="accordion-body">
							<p>Sent From: @messageDto.SentFromUserName</p>
							<p>Message sent: @messageDto.MessageSent</p>
							<p>@messageDto.Message</p>
						</div>
					</div>
				</div>
			</Virtualize>
		</div>

			<EditForm Model="NewMessageDto" OnSubmit="AddMessageToOrder">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<div class="form-control">
					<p>Send Message to här borde det vara en check vem det skickas till: @Borrower.Email @Owner.Email</p>
					<p>Body:</p>
					<InputTextArea @bind-Value="NewMessageDto.Message"></InputTextArea>
				</div>
				<button class="btn btn-primary">Send Message</button>
			</EditForm>
		 *@
		@*
			* Knapp för att ändra status på ordern: 
		*@


	}
}
else
{
	<div class="container">Laddar... </div>
}

<p>
	Svarsmeddelande: @ResponseMessage
</p>

@code {
	[Parameter]
	public string Id { get; set; }

	public OrderDto CurrentOrder { get; set; } = null;
	public UserDto Owner { get; set; } = null;
	public UserDto Borrower { get; set; } = null;

	public MessageDto NewMessageDto { get; set; } = new();

	public string ResponseMessage = "Inget svar ännu.";

	protected override async Task OnInitializedAsync()
	{
		var result = await HttpClient.GetFromJsonAsync<ServiceResponse<OrderDto>>(HttpClient.BaseAddress + $"getByOrderId?orderId={Id}");

		if (result.Success)
		{
			CurrentOrder = result.Data;

			await GetUserInfo();
		}

		await base.OnInitializedAsync();
	}

	private async Task GetUserInfo()
	{
		var resultOwner = await HttpClient.GetFromJsonAsync<ServiceResponse<UserDto>>(HttpClient.BaseAddress + $"getUserByUserName?userName={CurrentOrder.OwnerUserId}");

		if (resultOwner.Success)
			Owner = resultOwner.Data;

		var resultBorrower = await HttpClient.GetFromJsonAsync<ServiceResponse<UserDto>>(HttpClient.BaseAddress + $"getById?id={CurrentOrder.BorrowerUserId}");

		if (resultBorrower.Success)
			Borrower = resultBorrower.Data;
	}

	private async Task AddMessageToOrder()
	{
		//Lägga till meddelande till ordern
		var userInfo = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var currentUserName = userInfo.User.Identity.Name;

		//NewMessageDto. = currentUserName; //Detta ska vara den aktiva användaren.

		// //Välja namnet som inte är currentUser
		// if (Owner.UserName == currentUserName)
		// {
		// 	NewMessageDto.SentToUserName = Borrower.UserName;
		// }
		// else
		// {
		// 	NewMessageDto.SentToUserName = Owner.UserName;
		// }

		NewMessageDto.IsRead = false;

		//CurrentOrder.OrderMessageDtos.Add(NewMessageDto);

		var response = await HttpClient.PatchAsJsonAsync(HttpClient.BaseAddress + "updateOrder", CurrentOrder);

		var result = await response.Content.ReadFromJsonAsync<ServiceResponse<OrderDto>>();

		if (result.Success)
		{
			CurrentOrder = result.Data;
			ResponseMessage = result.Message;
			NewMessageDto = new();
		}
	}

	private async Task IsReadMethod(MessageDto messageDto)
	{
		Console.WriteLine("är meddelande läst:" + messageDto.IsRead);


		if (!messageDto.IsRead)
		{
			messageDto.IsRead = true;
			var response = await HttpClient.PatchAsJsonAsync(HttpClient.BaseAddress + "updateMessage", messageDto);
			ResponseMessage = response.ReasonPhrase;
		}

	}

}
