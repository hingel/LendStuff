@page "/Messages"
@using LendStuff.Shared.DTOs
@using LendStuff.Shared
@using Microsoft.AspNetCore.Authorization

@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<h3>Messages</h3>

<div class="container row">
	<div class="container col-md-3">
		<h5>Contacts</h5>
		<Virtualize Items="ContactNames.ToList()" Context="name">
			<li class="list-group-item list-group-item-action" @onclick="() => SelectActiveReceiver(name)">
				@name
			</li>
		</Virtualize>
	</div>
	
	<ul class="nav nav-tabs" id="myTab" role="tablist">
		<li class="nav-item">
			<a class="nav-link active" id="inbox-tab" data-toggle="tab" href="#inbox" role="tab" aria-controls="home" aria-selected="True" @onclick="ResetActiveMessage">Inbox</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" id="outbox-tab" data-toggle="tab" href="#outbox" role="tab" aria-controls="outbox" aria-selected="False" @onclick="ResetActiveMessage">Outbox</a>
		</li>
	</ul>
	<br/>
	<div class="tab-content"  id="myTabContent">
		<div class="tab-pane fade show active" id="inbox" role="tabpanel" aria-labelledby="inbox-tab">
			<div class="container">
				<Virtualize Items="ListOfMessagesDtos.Where(m => m.SentFromUserName != SenderName).ToList()" Context="messageDto">
					<li class="list-group-item list-group-item-action" @onclick="() => SelectActiveMessage(messageDto)">
						@messageDto.Message.Substring(0, 10)
					</li>
				</Virtualize>
			</div>
		</div>
		<div class="tab-pane fade" id="outbox" role="tabpanel" aria-labeledby="outbox-tab">
			<div class="container">
				<Virtualize Items="ListOfMessagesDtos.Where(m => m.SentFromUserName == SenderName).ToList()" Context="messageDto">
					<li class="list-group-item list-group-item-action" @onclick="() => SelectActiveMessage(messageDto)">
						<div>
							@messageDto.Message.Substring(0, 15)
						</div>
					</li>
				</Virtualize>
			</div>
		</div>
	</div>
</div>

<br/>
<br/>

<div class="container row">
	@if (ActiveMessageDto != null)
	{
		<div class="container">
			Sent from: @ActiveMessageDto.SentFromUserName,
			DateSent: @ActiveMessageDto.MessageSent.ToShortDateString()
		</div>

		<div class="container col-md-9">
			<EditForm Model="ActiveMessageDto" OnSubmit="SendMessage">
				<div class="form-control">
					<div class="row">
						<div class="container col-md-6">
							<p>Send Message to:</p>
							<InputText @bind-Value="ActiveMessageDto.SentToUserName"></InputText>
							<p>Body:</p>
							<InputText @bind-Value="ActiveMessageDto.Message"></InputText>
						</div>
						<div class="row-cols-6">
							@if (ActiveMessageDto.Message == @activeMessageText)
							{
								<button class="btn btn-primary" disabled="disabled">Send Message</button>
							}
							else
							{
								<button class="btn btn-primary">Send Message</button>
							}
						<div class="btn" @onclick="() => DeleteMessage(ActiveMessageDto)">Delete</div>
						</div>
					</div>
				</div>
			</EditForm>
		</div>
	}
	
	

	<p>@ResponseMessage</p>
</div>

@code {
	public IEnumerable<MessageDto> ListOfMessagesDtos { get; set; } = new List<MessageDto>(); //lista med alla meddelande där inloggad användare förekommer.
	private List<string> ContactNames = new (); //Listan med kontakter
	private List<MessageDto> ActiveSenderMessages = new (); //meddelande där contactnamnet ovan ingår.

	private string SenderName = string.Empty;
	private string ReceiverName = string.Empty;

	private string activeMessageText = string.Empty;
	public MessageDto ActiveMessageDto = null;

	public string ResponseMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		var userInfo = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		SenderName = userInfo.User.Identity.Name;
		var senderClaims = userInfo.User.Claims.ToList();

		//senderId = userInfo.User.Claims.ToList()[2].Value; //Här kan id för användaren fås fram.
		
		//Console.WriteLine("Här ska det skrivas ut grejer:" + senderClaims[2].Type + senderClaims[2].Value + senderClaims[2].ValueType);
		
		await GetMessages();

		await base.OnInitializedAsync();
	}

	private async Task GetMessages()
	{
		var response = await HttpClient.GetFromJsonAsync<ServiceResponse<IEnumerable<MessageDto>>>(HttpClient.BaseAddress + $"getUsersMessages?name={SenderName}");
		//var response = await HttpClient.GetFromJsonAsync<ServiceResponse<IEnumerable<MessageDto>>>(HttpClient.BaseAddress + $"getUsersMessages?name={senderId}");

		Console.WriteLine(response.Message);

		if (response.Success)
		{
			ContactNames = FindContacts(response.Data);

			ListOfMessagesDtos = response.Data;
		};
	}

	private List<string> FindContacts(IEnumerable<MessageDto> responseData)
	{
		var listToReturn = new List<string>();

		foreach (var message in responseData)
		{
			if (message.SentFromUserName != SenderName && listToReturn.All(m => m != SenderName))
				listToReturn.Add(message.SentFromUserName);
			

			if (message.SentToUserName != SenderName && listToReturn.All(m => m != SenderName))
				listToReturn.Add(message.SentToUserName);
		}

		return listToReturn;
	}

	private void SelectActiveReceiver(string name)
	{
		ActiveSenderMessages = ListOfMessagesDtos.Where(m => m.SentFromUserName == name || m.SentToUserName == name).ToList();

		ReceiverName = name;
	}

	private async Task SendMessage()
	{
		ActiveMessageDto.SentFromUserName = SenderName;

		var response = await HttpClient.PostAsJsonAsync(HttpClient.BaseAddress + "addMessage", ActiveMessageDto);
		var result = await response.Content.ReadFromJsonAsync<ServiceResponse<string>>();

		if (result.Success)
		{
			await GetMessages(); //uppdatera med alla meddelande från servern igen.
			ActiveMessageDto = null;
			ResponseMessage = result.Message;
			Console.WriteLine("I sent message succes:" + ResponseMessage);
		}
		else
		{
			ResponseMessage = result.Message;
			Console.WriteLine("I sent message false:" + ResponseMessage);
		}
	}

	private async Task DeleteMessage(MessageDto messageToDelete)
	{
		var response = await HttpClient.DeleteAsync(HttpClient.BaseAddress + $"deleteMessage?id={messageToDelete.MessageId}");
		var result = await response.Content.ReadFromJsonAsync<ServiceResponse<string>>();

		if (result.Success)
		{
			ResponseMessage = result.Message;
			ActiveSenderMessages.Remove(messageToDelete);
			GetMessages();
			Console.WriteLine("I Delete message succes:" + ResponseMessage);
		}
		else
		{
			ResponseMessage = result.Message;
			Console.WriteLine("I Delete message false:" + ResponseMessage);
		}
	}

	private void SelectActiveMessage(MessageDto activeMessageDto)
	{
		ActiveMessageDto = activeMessageDto;
		activeMessageText = activeMessageDto.Message;
	}

	private void ResetActiveMessage()
	{
		ActiveMessageDto = null;
	}

}