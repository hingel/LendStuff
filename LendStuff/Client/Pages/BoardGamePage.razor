@page "/BoardGamePage/{Id}"
@using LendStuff.Shared
@using LendStuff.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

@inject HttpClient HttpClient
<h3>BoardGamePage</h3>

@if (@CurrentBoardGameDto == null)
{
	<p>Loading....</p>
}
else
{
	@CurrentBoardGameDto.Title
	@CurrentBoardGameDto.Description
	@CurrentBoardGameDto.Comment

	//Lista användare som har spelet. Borde göra som en table för att kunna sortera efter stad etc.
	//Vill inte lista sina egna spel heller:
	<Virtualize Items="UserOwningBoardGame.ToList()" Context="userDto">
		<li class="list-group-item list-group-item-action">
			<div class="container row">
				<div class="container col-2">
					<p>Username: @userDto.UserName</p>
				</div>
				<div class="container col-2">
					<AuthorizeView>
						<div class="form-check">
							<button class="btn-primary" @onclick="() => SendMessage(userDto)">Send request to borrow.</button>
						</div>
					</AuthorizeView>
				</div>
			</div>
		</li>
	</Virtualize>

	<p>@ResponseMessage</p>	

}
@code {
	[Parameter]
	public string Id { get; set; }

	public BoardGameDto CurrentBoardGameDto;
	public IEnumerable<UserDto> UserOwningBoardGame = new List<UserDto>();
	public string ResponseMessage = string.Empty;
	//private string _userId = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		var userAuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		var result = await HttpClient.GetFromJsonAsync<ServiceResponse<BoardGameDto>>(HttpClient.BaseAddress + $"getGameById?id={Id}");

		if (result != null)
		{
			CurrentBoardGameDto = result.Data;
		}

		//if (userAuthState.User.Claims.Count() > 1)
		//	_userId = userAuthState.User.Claims.ToList()[2].Value;

		var usersOwningBoardGameResult = await HttpClient.GetFromJsonAsync<ServiceResponse<IEnumerable<UserDto>>>(HttpClient.BaseAddress + $"usersOwningBoardGame?boardGameId={Id}");

		if (usersOwningBoardGameResult != null && usersOwningBoardGameResult.Success)
		{
			UserOwningBoardGame = usersOwningBoardGameResult.Data.Where(g => g.UserName != userAuthState.User.Identity.Name);
			var listgame = UserOwningBoardGame.Where(u => u.BoardGameDtos.Where(b => b.BoardGameDto.Id == CurrentBoardGameDto.Id).Any(b => b.ForLending));
		}

		await base.OnInitializedAsync();
	}

	private async Task SendMessage(UserDto userDto)
	{
		var userInfo = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		//TODO: Lägg till mer info för användaren i meddelandet. Kanske en länk till användarens sida?

		var newRequstDto = new MessageDto()
		{
			Message = $"{userInfo.User.Identity.Name} wants to borrow {CurrentBoardGameDto.Title} from you. Please send a response if game is available or not.",
			SentFromUserName = $"{userInfo.User.Identity.Name}",
			SentToUserName = userDto.UserName
		};
		//TODO: Borde komma en fråga om man verkligen vill skicka? Ok eller bekräftelse

		var newOrderDto = new OrderDto()
		{
			OwnerUserName = userDto.UserName,
			BorrowerUserId = userInfo.User.Claims.ToArray()[2].Value,
			BoardGameId = Id,
			LentDate = DateTime.UtcNow,
			ReturnDate = DateTime.UtcNow.AddDays(21),
			Status = OrderStatus.Inquiry,
			OrderMessageDtos = new List<MessageDto>(){newRequstDto}
		};

		var response = await HttpClient.PostAsJsonAsync(HttpClient.BaseAddress + "postOrder", newOrderDto);
		var result = await response.Content.ReadFromJsonAsync<ServiceResponse<string>>();
		var responseMessage = result.Message;
	}

}